"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const UserController_1 = __importDefault(require("../controller/UserController"));
const CartController_1 = __importDefault(require("../controller/CartController"));
const MenuController_1 = __importDefault(require("../controller/MenuController"));
const OrderController_1 = __importDefault(require("../controller/OrderController"));
const authMiddleware_1 = __importDefault(require("../middleware/authMiddleware"));
const CategoryController_1 = __importDefault(require("../controller/CategoryController"));
const SubCategoryController_1 = __importDefault(require("../controller/SubCategoryController"));
const WishListController_1 = __importDefault(require("../controller/WishListController"));
const ProductReviewsController_1 = __importDefault(require("../controller/ProductReviewsController"));
const ReportProductController_1 = __importDefault(require("../controller/ReportProductController"));
const AdminController_1 = __importDefault(require("../controller/AdminController"));
const router = (0, express_1.Router)();
// Routes that do not require authentication
router.post("/login", UserController_1.default.LoginUser);
router.get("/users", UserController_1.default.getUsers);
router.post("/users", UserController_1.default.addUser);
router.put("/change-profile-pic/:id", UserController_1.default.updateProfilePic);
router.get("/products", MenuController_1.default.get);
// router.get("/products2", ProductController.getPaginatedProducts);
// router.get("/products/new-arrivals", ProductController.newArrivales);
// router.get("/products/featured", ProductController.featuredProducts);
router.get("/products/related/:id", MenuController_1.default.relatedProducts);
router.get("/products/:id", MenuController_1.default.detail);
router.get("/products/category/:id", MenuController_1.default.featchMenuesByCategory);
router.get("/products/subCategory/:id", MenuController_1.default.featchMenuBySubCategory);
router.delete("/store/product/:id", MenuController_1.default.delete);
// Group routes that require authentication
const authRoutes = (0, express_1.Router)();
authRoutes.use(authMiddleware_1.default);
router.get("/categories", CategoryController_1.default.getCategories);
router.get("/sub-categories", SubCategoryController_1.default.getAll);
authRoutes.post("/store/add-product", MenuController_1.default.add);
authRoutes.put("/store/product/:id", MenuController_1.default.updateProduct);
// authRoutes.get("/store/product/:id", ProductController.updateProduct);
authRoutes.put("/store/order/:id/change-status", OrderController_1.default.changeStatus);
authRoutes.delete("/users/:id", UserController_1.default.deleteUser);
authRoutes.get("/verifyToken", UserController_1.default.verifyToken);
authRoutes.get("/userOrders", OrderController_1.default.userOrders);
authRoutes.post("/order", OrderController_1.default.orderProduct);
authRoutes.post("/cancel-full-order/:id", OrderController_1.default.cancelFullOrder);
authRoutes.post("/cancel-order-item/:id", OrderController_1.default.cancelOrderItem);
authRoutes.get("/cart", CartController_1.default.getCartItems);
authRoutes.post("/cart", CartController_1.default.addToCart);
authRoutes.delete("/cart/:id", CartController_1.default.removeFromCart);
authRoutes.post("/cartAddQuantity/:id", CartController_1.default.AddQuantity);
authRoutes.post("/cartSubtractQuantity/:id", CartController_1.default.SubtractQuantity);
authRoutes.get("/userCartItems", CartController_1.default.getUserCart);
authRoutes.post("/cart-to-wishlist/:id", CartController_1.default.cartToWishlist);
authRoutes.post("/clear-cart", CartController_1.default.clearCart);
authRoutes.get("/wishlist", WishListController_1.default.getwishlists);
authRoutes.post("/wishlist", WishListController_1.default.addToWishlist);
authRoutes.delete("/wishlist/:id", WishListController_1.default.removeFromWishlist);
authRoutes.get("/userwishlist", WishListController_1.default.getUserWishlist);
authRoutes.post("/wishlist-to-cart/:id", WishListController_1.default.wishListToCArt);
authRoutes.post("/clear-wishlist", WishListController_1.default.clearWishlist);
authRoutes.get("/menu/:id/review", ProductReviewsController_1.default.getProductReviews);
authRoutes.post("/menu/:id/review", ProductReviewsController_1.default.addProductReview);
authRoutes.delete("/menu/:id/review", ProductReviewsController_1.default.removeReview);
authRoutes.put("/menu/:id/review", ProductReviewsController_1.default.updateReview);
authRoutes.get("/reported-menues", ReportProductController_1.default.getReportedMenu);
authRoutes.post("/report-menu/:id", ReportProductController_1.default.addReportedMenu);
// will be done for admin only
authRoutes.put("/report-menu/:id", ReportProductController_1.default.updateReview);
// Adimin routes
authRoutes.get("/admin/users", AdminController_1.default.getUsers);
authRoutes.put("/admin/users/:id/activate", AdminController_1.default.activateUser);
authRoutes.put("/admin/users/:id/deactive", AdminController_1.default.deActivateUser);
authRoutes.get("/admin/stores", AdminController_1.default.getStores);
authRoutes.put("/admin/stores/:id/activate", AdminController_1.default.activateStore);
authRoutes.put("/admin/stores/:id/deactive", AdminController_1.default.deActivateStore);
authRoutes.get("/admin/reporeted-products", AdminController_1.default.getReportedProducts);
router.get("/admin/categories", CategoryController_1.default.getCategories);
router.post("/admin/categories", CategoryController_1.default.addCategory);
router.get("/admin/categories/:id", CategoryController_1.default.getCategoryById);
router.delete("/admin/categories/:id", CategoryController_1.default.removeCategory);
router.put("/admin/categories/:id", CategoryController_1.default.updateCategory);
router.get("/admin/sub-categories", SubCategoryController_1.default.getAll);
router.post("/admin/sub-categories", SubCategoryController_1.default.addSubCategory);
router.get("/admin/sub-categories/:id", SubCategoryController_1.default.getDetail);
router.delete("/admin/sub-categories/:id", SubCategoryController_1.default.deleteSubcategory);
router.put("/admin/sub-categories/:id", SubCategoryController_1.default.updateSubCategory);
router.use(authRoutes);
exports.default = router;
